module MetaC-CSP/generate-c

imports

  signatures/MetaC-CSP-sig
  signatures/BaseC-sig
  BaseC/desugar/constructors
  MetaC-CSP/desugar
  MetaC-CSP/generate-c/-

rules

  // test strategy that changes the <newname> in CSPChanWrite to something deterministic
  generate-c-ast(|t) = fail
  generate-pp = fail
  generate-c-csp-test: t@(selected, _, _, path, _)
    -> (path, <bottomup(try(generate-c-csp-test-pre))
        ; bottomup(try(generate01) ; try(flatten-list))
        ; bottomup(try(generate-c-csp-test-post))
        ; generate-c-ast(|t)
        ; generate-pp
      > selected)

  generate-c-csp-test-pre: CSPChanWrite(_, a, b) -> CSPChanWrite("temp_var", a, b)
  generate-c-csp-test-pre: CSPAltGuard(name, expr) -> CSPAltGuard("guard", expr)

  generate-c-csp-test-post: Var(_){RenamedVar(name)} -> Var(Identifier(<conc-strings> ("renamed_", name)))
  generate-c-csp-test-post: VarDeclaration(s, t, d, i){RenamedVar(name)}
    -> VarDeclaration(s, t, Decl(Identifier(<conc-strings> ("renamed_", name))), i)

  generate-include-headers: CSPChan(_) -> Include("csp.h")
  generate-include-headers: CSPProcess(_, _, _, _) -> Include("process.h")

  generate02:
    CSPChan(_) -> Pointer(TypedefName(Identifier("Channel")))
