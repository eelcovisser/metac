module MetaC-CSP/generate-c/par

imports

  signatures/BaseC-sig
  signatures/MetaC-CSP-sig
  BaseC/desugar/constructors
  names/MetaC-CSP/names
  names/BaseC/names/variables

rules

  // run parallel processes
  generate02:
    CSPPar(processes) -> CompoundStatement(<flatten-list> [
      chan-inits,
      proc-inits,
      ExpressionStatement(Some(
        Call(
          Var(Identifier("ProcPar")),
          <conc> (
            proc-adresses,
            [Null()]
          )
        )
      )),
      destroys,
      nullify-chans
    ])
    where
      chan-inits := <generate-chans(generate-create-chan-init)> processes
      ; proc-inits := <map-with-index(generate-create-init-process)> processes
      ; proc-adresses := <map-with-index(\
          (i, CSPInvokeProcess(Identifier(name), _, state))
          -> Address(Var(Identifier(<concat-strings> [name, "_proc_", <int-to-string> i])))
        \)> processes
      ; destroys := <map-with-index(generate-destroy-process)> processes
      ; nullify-chans := <generate-chans(generate-nullify-chan)> processes

  generate-chans(s) =
    collect-all(?Var(_))
    ; filter(\ var -> var where <get-type ; ?CSPChan(_)> var\)
    ; map(s)
    ; flatten-list

  generate-create-chan-init:
    v@Var(Identifier(name))
    -> [
      VarDeclaration([],
        Type([], TypedefName(Identifier("Channel"))),
        Decl(Identifier(temp-var-name)),
        None()
      ),
      async-buffer,
      If(
        Equal(v, Null()),
        CompoundStatement(<flatten-list> [
          ExpressionStatement(Some(
            Assign(
              Var(Identifier(name)),
              Assign(),
              Address(Var(Identifier(temp-var-name)))
            )
          )),
          ExpressionStatement(Some(
            Call(
              Var(Identifier("CSP_chanInit")),
              [
                Var(Identifier(name)),
                Var(Identifier("CSP_ONE2ONE_CHANNEL")),
                Integer("0")
              ]
            )
          )),
          init-chan-buffer
        ])
      )
    ]
    where
      temp-var-name := $[__[name]_csp_channel]
      ; async-buffer := <generate-chan-async-buffer <+ ![]> v
      ; init-chan-buffer := <generate-create-chan-init-buffer <+ ![]> v

  generate-chan-async-buffer: v@Var(Identifier(name))
    -> VarDeclaration([], type, Decl(Identifier($[__[name]_csp_async_buffer])), None())
    where
      <generate-buffer-size> v
      ; type := <get-type ; ?CSPChan(<id>)> v

  generate-create-chan-init-buffer:
    v@Var(Identifier(name))
    -> ExpressionStatement(Some(Call(
      Var(Identifier("CSP_chanSetAsync")),
      [v, Address(Var(Identifier($[__[name]_csp_async_buffer])))]
    )))
    where
      <generate-buffer-size> v
      // TODO add support in libcsp for a buffer size != 1
      ; type := <get-type ; ?CSPChan(<id>)> v

  generate-buffer-size:
    v@Var(_) -> <get-storage ; ?Storage(<id>) ; fetch-elem(generate-buffer-size)> v
  generate-buffer-size: CSPBuffered() -> Integer("1")
  generate-buffer-size: CSPBuffered(size) -> size

  generate-nullify-chan:
    v@Var(Identifier(name))
    -> If(Equal(v, Address(Var(Identifier($[__[name]_csp_channel])))),
      CompoundStatement([
        ExpressionStatement(Some(Call(
          Var(Identifier("CSP_chanClose")), [v]
        ))),
        ExpressionStatement(Some(Assign(
          v,
          Assign(),
          Null()
        )))
      ])
    )

  generate-create-init-process:
    (i, CSPInvokeProcess(proc-id@Identifier(name), args, states'))
    -> [
      VarDeclaration(
        [],
        Type([], TypedefName(Identifier("Process"))),
        Decl(Identifier(proc-name)),
        None()
      ),
      VarDeclaration(
        [],
        Type([], TypedefName(Identifier(proc-name-args-type))),
        Decl(Identifier(proc-name-args)),
        None()
      ),
      arg-assignments,
      ExpressionStatement(Some(
        Assign(
          Field(Var(Identifier(proc-name)), Identifier("args")),
          Assign(),
          Address(Var(Identifier(proc-name-args)))
        )
      )),
      ExpressionStatement(Some(
        Call(
          Var(Identifier("ProcInit")),
          [
            Address(Var(Identifier(proc-name))),
            Var(Identifier(name)),
            Null(),
            Integer("0"),
            Integer("0")
          ]
        )
      ))
    ]
    where
      proc-name := <concat-strings> [name, "_proc_", <int-to-string> i]
      ; proc-name-args-type := <conc-strings> (name, "_ProcessArgs")
      ; proc-name-args := <conc-strings> (proc-name, "_args")
      ; CSPProcessParameterList(proc-params) := <get-process-params> name
      ; proc-states := <get-process-state ; ?CSPStateParameterList(<id>) <+ ![]> name
      ; states := <?Some(CSPInvokeState(<id>)) <+ ![]> states'
      ; arg-assignments := <zip ; map(generate-create-init-process-assign-arg(|proc-name-args))> (
          <conc> (proc-params, proc-states),
          <conc> (args, states)
        )

  generate-create-init-process-assign-arg(|var-name):
    (FunDefinitionParameter(_, Decl(name)), arg)
    -> ExpressionStatement(Some(
      Assign(Field(Var(Identifier(var-name)), name), Assign(), arg)
    ))

  generate-destroy-process:
    (i, CSPInvokeProcess(Identifier(name), _, state))
    -> ExpressionStatement(Some(Call(
      Var(Identifier("ProcInitClean")),
      [Address(Var(Identifier(proc-name)))]
    )))
    where
      proc-name := <concat-strings> [name, "_proc_", <int-to-string> i]
