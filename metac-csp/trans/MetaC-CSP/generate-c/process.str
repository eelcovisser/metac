module MetaC-CSP/generate-c/process

imports

  BaseC/desugar/constructors
  signatures/MetaC-CSP-sig
  signatures/BaseC-sig
  MetaC-CSP/generate-c/alts
  MetaC-CSP/utils
  names/MetaC-CSP/names

signature constructors
  RenamedVar: Name -> RenamedVar

rules

  // Change process definitions, into a structure that are used for storing arguments.
  // and a function with the Process object as argument.
  generate01:
    CSPProcess(Identifier(name), CSPProcessParameterList(params), state, body)
    -> [
      TypedefDeclaration(
        Type([], Struct(
          None(),
          process-parameters
        )),
        Decl(Identifier(struct-name))
      ),
      alts-structures,
      FunDefinition(
        Identifier(name),
        [],
        Type([], Function(
          Type([], Void()),
          [Type([], Pointer(TypedefName(Identifier("Process"))))]
        )),
        [FunDefinitionParameter(
          Type([], Pointer(TypedefName(Identifier("Process")))),
          Decl(Identifier("__csp_process__"))
        )],
        CompoundStatement(<concat> [
          [VarDeclaration(
            [],
            Type([], Pointer(TypedefName(Identifier(struct-name)))),
            Decl(Identifier("args")),
            Some(PointerField(Var(Identifier("__csp_process__")), Identifier("args")))
          )],
          process-parameters-variables,
          static-variables,
          init-stmt,
          [Label(Identifier("__csp_process_recurse"), body'')]
        ])
      )
    ]
  where
    s-name := <strip-annos> name
    ; struct-name := <conc-strings> (s-name, "_ProcessArgs")
    ; states := <?CSPStateParameterList(<id>) <+ ![]> state
    ; all-params := <conc> (params, states)
    ; process-parameters := <map(generate-process-param-struct-field)> all-params
    ; process-parameters-variables := <map(generate-process-param-variable)> all-params
    ; (body', static-variables) := <generate-process-static-variables> body
    ; (body'', init-stmt) := <generate-process-init> body'
    ; alts-structures := <generate-alts-declarations> body''

  generate-process-param-struct-field:
    FunDefinitionParameter(type, decl)
    -> StructDeclarator(type, decl, None())

  generate-process-param-variable:
    FunDefinitionParameter(type, decl@Decl(name))
    -> VarDeclaration([], type, decl, Some(
      PointerField(Var(Identifier("args")), name)
    ))

  // generate recursive call into a "goto recurse;"
  generate: ExpressionStatement(Some(Call(var@Var(Identifier(_)), args))) ->
    <conc> (
      new-states,
      [Goto(Identifier("__csp_process_recurse"))]
    )
    where
      states := <get-process-state ; (?CSPStateParameterList(<id>) <+ ![])> var
      ; new-states := <zip(generate-assign-state)> (states, args)

  // assign new state variables from the recursive process call
  generate-assign-state:
    (FunDefinitionParameter(_, Decl(name)), arg)
    -> ExpressionStatement(Some(Assign(Var(name), Assign(), arg)))

  // static variables into a process need to be declared as variables at the top
  // of the function. These variables need to be changed into unique variable names
  generate-process-static-variables: body -> (body', variables')
    where
      variables := <collect-all(generate-process-collect-static-var)> body
      ; var-table := <foldr(!<new-hashtable>, generate-process-var-table-put)> variables
      ; body' := <bottomup(try(generate-process-var-rename(|var-table)) ; try(flatten-list))> body
      ; variables' := <map(generate-process-var-rename-decl(|var-table))> variables

  generate-process-collect-static-var:
    var@VarDeclaration(storage, _, _, _) -> var
    where <fetch-elem(?Static())> storage

  generate-process-var-table-put:
    (VarDeclaration(_, _, Decl(Identifier(name{def'})), _), table)
    -> <hashtable-put(|def', <newname> name)> table

  generate-process-var-rename-decl(|table):
    VarDeclaration(storage, type, Decl(Identifier(name{def'})), init)
    -> VarDeclaration(storage', type, Decl(Identifier(name'{def'})), init){RenamedVar(name)}
    where
      name' := <hashtable-get(|def')> table
      ; storage' := <filter(not(?Static()))> storage

  generate-process-var-rename(|table):
    VarDeclaration(_, _, Decl(Identifier(_{def'})), _) -> []
    where <hashtable-get(|def')> table

  generate-process-var-rename(|table):
    Var(Identifier(name{a*}))
    -> Var(Identifier(name'{a*})){RenamedVar(name)}
    where name' := <hashtable-get(|<generate-csp-resolve> name)> table

  // hoist the statement with label process_init outside the loop
  generate-process-init:
    body -> (body', [init])
    where
      <oncetd(?label@Label(Identifier("process_init"), init))> body
      ; body' := <bottomup(try(\ Label(Identifier("process_init"), _) -> [] \) ; try(flatten-list))> body

  generate-process-init:
    body -> (body, [])
