module generate-sm

language MetaC

test generate minimal state machine C code [[
  statemachine X {
    init start;
    state start {}
  }
]] build generate-c to "
  typedef struct  {
    int __sm_state__;
  } X;
  void X_transition_to_state (X *sm, int goal) {
    sm->__sm_state__ = goal;
  }
  void X_init (X *sm) {
    X_transition_to_state(sm, 0);
  }
  void X_exec (X *sm, int __sm_event__) {
    int __sm_cont__ = 1;
    while (__sm_cont__) {
      __sm_cont__ = 0;
      switch (sm->__sm_state__) {
        case 0:
          {
            break ;
          }
      }
    }
  }
  "

test generate minimal two states [[
  statemachine X {
    init middle;
    state start {}
    state middle {}
    state end {}
  }
]] build generate-c to "
  typedef struct {
    int __sm_state__;
  } X;
  void X_transition_to_state (X *sm, int goal) {
    sm->__sm_state__ = goal;
  }
  void X_init(X *sm) {
    X_transition_to_state(sm, 1);
  }
  void X_exec(X *sm, int __sm_event__) {
    int __sm_cont__ = 1;
    while (__sm_cont__) {
      __sm_cont__ = 0;
      switch (sm->__sm_state__) {
        case 0:
          { break ; }
        case 1:
          { break ; }
        case 2:
          { break ; }
      }
    }
  }"

test sm with epsilon transition [[
  statemachine X {
    init middle;
    state start {}
    state middle {
      on [1 < 2] -> start;
      on -> end;
    }
    state end {}
  }
]] build generate-c to "
  typedef struct {
    int __sm_state__;
  } X;
  void X_transition_to_state (X *sm, int goal) {
    sm->__sm_state__ = goal;
  }
  void X_init(X *sm) {
    X_transition_to_state(sm, 1);
  }
  void X_exec (X *sm, int __sm_event__) {
    int __sm_cont__ = 1;
    while (__sm_cont__) {
      __sm_cont__ = 0;
      switch (sm->__sm_state__) {
        case 0:
          { break ;
          }
        case 1:
          {
            if (1 < 2) {
              __sm_cont__ = 1;
              __sm_event__ = -1;
              X_transition_to_state(sm, 0);
              break ;
            }
            if (1) {
              __sm_cont__ = 1;
              __sm_event__ = -1;
              X_transition_to_state(sm, 2);
              break ;
            }
            break ;
          }
        case 2:
          { break ; }
      }
    }
  }"

test sm with transition with params [[
  statemachine X {
    init start;
    event foo(int32 a, int32 b);
    state start {
      on foo [1 > 2] / 1; -> end;
    }
    state end {}
  }
  void f() {
    statemachine X x;
    x<|foo(1, 2);
  }
]] build generate-c to "
  typedef struct {
    signed int a;
    signed int b;
  } X_EventParams;
  typedef struct {
    int __sm_state__;
  } X;
  void X_transition_to_state (X *sm, int goal) {
    sm->__sm_state__ = goal;
  }
  void X_init(X *sm) {
    X_transition_to_state(sm, 0);
  }
  void X_exec (X *sm, int __sm_event__, X_EventParams * event_args) {
    signed int a;
    signed int b;
    int __sm_cont__ = 1;
    if (__sm_event__ == 0) {
      a = event_args->a;
      b = event_args->b;
    }
    while (__sm_cont__) {
      __sm_cont__ = 0;
      switch (sm->__sm_state__) {
        case 0:
          {
            if (__sm_event__ == 0 && 1 > 2) {
              1;
              __sm_cont__ = 1;
              __sm_event__ = -1;
              X_transition_to_state(sm, 1);
              break ;
            }
            break ;
          }
        case 1:
          { break ; }
      }
    }
  }
  void f() {
    X x;
    X_EventParams x_event_args;
    X_init(&x);
    (x_event_args.a = 1, x_event_args.b = 2, X_exec(&x, 0, &x_event_args));
  }"

test sm with local variables [[
  statemachine X {
    init start;
    int32 x;
    state start {}
  }
]] build generate-c to "
  typedef struct {
    int __sm_state__;
    signed int x;
  } X;
  void X_transition_to_state (X *sm, int goal) {
    sm->__sm_state__ = goal;
  }
  void X_init (X *sm) {
    X_transition_to_state(sm, 0);
  }
  void X_exec (X *sm, int __sm_event__) {
    int __sm_cont__ = 1;
    while (__sm_cont__) {
      __sm_cont__ = 0;
      switch (sm->__sm_state__) {
        case 0:
          { break ; }
      }
    }
  }"

test sm state with an entry [[
  statemachine X {
    init start;
    state start {
      entry {
        1;
      }
    }
  }
]] build generate-c to "
  typedef struct {
    int __sm_state__;
  } X;
  void X_transition_to_state (X *sm, int goal) {
    switch (goal) {
      case 0: {
        1;
        break;
      }
    }
    sm->__sm_state__ = goal;
  }
  void X_init(X *sm) {
    X_transition_to_state(sm, 0);
  }
  void X_exec (X *sm, int __sm_event__) {
    int __sm_cont__ = 1;
    while (__sm_cont__) {
      __sm_cont__ = 0;
      switch (sm->__sm_state__) {
        case 0:
          { break ; }
      }
    }
  }"

test init statemachine code [[
  statemachine X {
    init start;
    state start {}
  }
  void main () {
    statemachine X y;
  }
]] build generate-c to "
  typedef struct  {
    int __sm_state__;
  } X;
  void X_transition_to_state (X *sm, int goal) {
    sm->__sm_state__ = goal;
  }
  void X_init (X *sm) {
    X_transition_to_state(sm, 0);
  }
  void X_exec (X *sm, int __sm_event__) {
    int __sm_cont__ = 1;
    while (__sm_cont__) {
      __sm_cont__ = 0;
      switch (sm->__sm_state__) {
        case 0:
          {
            break ;
          }
      }
    }
  }
  void main () {
    X y;
    X_init(&y);
  }
  "

test statemachine trigger event without params [[
  statemachine X {
    init start;
    event foo();
    state start {
      on foo -> start;
    }
  }
  void main () {
    statemachine X y;
    y<|foo();
  }
]] build generate-c to "
  typedef struct  {
    int __sm_state__;
  } X;
  void X_transition_to_state (X *sm, int goal) {
    sm->__sm_state__ = goal;
  }
  void X_init (X *sm) {
    X_transition_to_state(sm, 0);
  }
  void X_exec (X *sm, int __sm_event__) {
    int __sm_cont__ = 1;
    while (__sm_cont__) {
      __sm_cont__ = 0;
      switch (sm->__sm_state__) {
        case 0:
          {
            if (__sm_event__ == 0 && 1) {
              __sm_cont__ = 1;
              __sm_event__ = -1;
              X_transition_to_state(sm, 0);
              break ;
            }
            break ;
          }
      }
    }
  }
  void main () {
    X y;
    X_init(&y);
    X_exec(&y, 0);
  }
  "

test statemachine with local vars [[
  int32 a = 1;
  statemachine X {
    init start;
    int32 b = 0;
    event foo();
    state start {
      entry {
        b += a;
      }
      on foo [b > a] -> start;
    }
  }
]] build generate-c to "
  signed int a = 1;
  typedef struct  {
    int __sm_state__;
    signed int b;
  } X;
  void X_transition_to_state (X *sm, int goal) {
    switch (goal) {
      case 0:
        {
          sm->b += a;
          break ;
        }
    }
    sm->__sm_state__ = goal;
  }
  void X_init (X *sm) {
    sm->b = 0;
    X_transition_to_state(sm, 0);
  }
  void X_exec (X *sm, int __sm_event__) {
    int __sm_cont__ = 1;
    while (__sm_cont__) {
      __sm_cont__ = 0;
      switch (sm->__sm_state__) {
        case 0:
          {
            if (__sm_event__ == 0 && sm->b > a) {
              __sm_cont__ = 1;
              __sm_event__ = -1;
              X_transition_to_state(sm, 0);
              break ;
            }
            break ;
          }
      }
    }
  }
  "
