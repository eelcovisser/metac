module expr-bin

language MetaC

test var lookup [[
  int32 a;
  int32 b = [[a]];
]] run get-type to Int32()

test get define type [[
  #define FOO 4
  void f() { [[(0,FOO)]]; }
]] run get-type to Int8()

test type cast [[
  void f() { [[(unsigned long *) 1]]; }
]] run get-type to Pointer(UInt64())

test type cast [[
  typedef unsigned long * a;
  void f() { [[(a) 1]]; }
]] run get-type to Pointer(UInt64())

test prefix incr [[
  void f() { [[++1]]; }
]] run get-type to Int8()

test prefix decr [[
  void f() { [[--1]]; }
]] run get-type to Int8()

test address [[
  void f(int8 a) {
    [[&a]];
  }
]] run get-type to Pointer(Int8())

test deref [[
  void f(int8 *a) {
    [[*a]];
  }
]] run get-type to Int8

test postive [[
  int32 a = [[+1]];
]] run get-type to Int8()

test negative [[
  int32 a = [[-(1)]];
]] run get-type to Int8()

test complement [[
  int32 a = [[~1]];
]] run get-type to Int8()

test complement must be on ints [[
  int32 a = ~1.2;
]] 2 errors

test negate [[
  int32 a = [[!0]];
]] run get-type to UInt8()

test sizeof expr [[
  int32 a = [[sizeof 0]];
]] run get-type to UInt8()

test sizeof type [[
  int32 a = [[sizeof (int32)]];
]] run get-type to UInt8()

test array field [[
  float a[];
  void b() { [[(a[0])]]; } // with parens, because of spt
]] run get-type to Float32()

test array field from a pointer [[
  void b(int16 *a) { [[(a[0])]]; } // with parens, because of spt
]] run get-type to Int16()

test pointer with array and typedefs [[
  void f() {
    typedef uint8 a[];
    typedef a *b;
    a x = {1,2,3};
    b y = &x;
    [[((*y)[0]) + 1]];
  }
]] run get-type to UInt8()

test function call [[
  int8 f(){}
  void g() {
    [[f()]];
  }
]] run get-type to Int8()

test function call [[
  int8 *f(){}
  void g() {
    [[f()]];
  }
]] run get-type to Pointer(Int8())

test function call with typedef [[
  typedef uint8 * T;
  T f(){}
  void g() {
    [[f()]];
  }
]] run get-type to Pointer(UInt8())

test struct field type [[
  struct X {unsigned short x;};
  struct X a;
  uint32 b = [[a.x]];
]] run get-type to UInt16()

test struct field with typedef [[
  typedef uint8 * T;
  struct X {T x;};
  struct X a;
  T b = [[a.x]];
]] run get-type to Pointer(UInt8())

test union pointer field type [[
  union X {unsigned short x;};
  union X *a;
  uint32 b = [[a->x]];
]] run get-type to UInt16()

test union pointer field with typedef [[
  typedef uint8 * T;
  union X {T x;};
  union X *a;
  T b = [[a->x]];
]] run get-type to Pointer(UInt8())
