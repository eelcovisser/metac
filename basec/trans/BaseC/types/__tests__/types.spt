module types

language MetaC

test pointer type [[
  int32 *a;
  int32 *b = [[a]];
]] run get-type to Pointer(Int32)

test array type [[
  int32 a[];
  int32 b[] = [[a]];
]] run get-type to Array(Int32, None())

test multi dimensional array type [[
  int32 a[][];
  int32 b[][] = [[a]];
]] run get-type to Array(Array(Int32, None()), None())

test array or pointers type [[
  int32 *a[];
  int32 *b[] = [[a]];
]] run get-type to Array(Pointer(Int32), None())

test function type [[
  int32 a();
  int f() { [[a]]; }
]] run get-type to Function(Int32(), [])

test function type with parameter [[
  int32 a(int8);
  int f() { [[a]]; }
]] run get-type to Function(Int32(), [Type([], Int8())])

test function type with parameters [[
  int32 a(int8, const uint16 *);
  int f() { [[a]]; }
]] run get-type to Function(Int32(), [
    Type([], Int8()),
    Type([Const], Pointer(UInt16()))
  ])

test enum type [[
  enum X {A};
  enum X a = [[A]];
]] run get-type to Enum(Identifier("X"))

test enum type [[
  enum X {A};
  enum X a = A;
  enum X b = [[a]];
]] run get-type to Enum(Identifier("X"{_}))

test struct type [[
  struct X {};
  struct X a;
  struct X b = [[a]];
]] run get-type to Struct(Identifier("X"{_}))

test union type [[
  union X {};
  union X a;
  union X b = [[a]];
]] run get-type to Union(Identifier("X"{_}))

test char type [[
  char a;
  char b = [[a]];
]] run get-type to Char()

test char type is assignable with int8 [[
  char a;
  int8 b = a;
]] 0 errors

test char variable can have a char [[
  char a = 'a';
]] 0 errors
