module BaseC/names/structs-custom

imports
  runtime/nabl/-
  runtime/task/-
  runtime/properties/-
  runtime/types/-
  runtime/relations/-
  runtime/editor/-
  signatures/BaseC/-
  BaseC/desugar/-
  names/BaseC/names/variables
  names/BaseC/names/structs

rules

  field-lookup-to-candiatate(|ctx, e): (rewrite-name, scope-namespace, field-namespace) ->
    <{s, p:
      {p:
        p := <new-task-fixdeps(|ctx, [])> Id(<get-or-create-property-task(|ctx, Type())> e)
        ; {prev:
            ?prev
            ; s := <new-task-fixdeps(|ctx, [prev])> Rewrite(rewrite-name, p)
          }
      }
      ; !UseCandidate(
          field-namespace, [],
          Context(scope-namespace, s, [], Current()),
          True(), []
        )
    }>

  collect-all-lookups(s) = <rec x(try(s ; x))> []

  register-field-lookup(|name, scope-ns, field-ns): names -> [(name, scope-ns, field-ns) | names]
    where <not(fetch-elem(?(name, _, _)))> names

  // fields: expr.foo

  nabl-get-name: Field(e, Identifier(field)) -> field
  nabl-name-apply(s) = Field(id, Identifier(s))

  nabl-use-site(|lang__, ctx, uniques__, uris__, states__) =
    ?expr@Field(e, Identifier(field))
    ; candidates := <collect-all-field-lookups ; map(field-lookup-to-candiatate(|ctx, e))> []
    ; <origin-track-forced(
        Field(id, origin-track-forced(
          Identifier(nabl-use(|lang__, ctx, uniques__, uris__, candidates))
        ))
      )> expr

  // call field-lookup with the list of collected field-lookups until
  // all field-lookups are in the accumulator list
  collect-all-field-lookups = collect-all-lookups(field-lookup)

  // register struct and unions
  field-lookup = register-field-lookup(|"rewrite-struct-name", NablNsStruct(), NablNsField())
  task-rewrite: ("rewrite-struct-name", Struct(Identifier(s))) -> s

  field-lookup = register-field-lookup(|"rewrite-union-name", NablNsUnion(), NablNsField())
  task-rewrite: ("rewrite-union-name", Union(Identifier(s))) -> s

  // pointer field: expr->foo

  nabl-get-name: PointerField(e, Identifier(field)) -> field
  nabl-name-apply(s) = PointerField(id, Identifier(s))

  nabl-use-site(|lang__, ctx, uniques__, uris__, states__) =
    ?expr@PointerField(e, Identifier(field))
    ; candidates := <collect-all-pointer-field-lookups ; map(field-lookup-to-candiatate(|ctx, e))> []
    ; <origin-track-forced(
        PointerField(id, origin-track-forced(
          Identifier(nabl-use(|lang__, ctx, uniques__, uris__, candidates))
        ))
      )> expr

  collect-all-pointer-field-lookups = collect-all-lookups(pointer-field-lookup)

  // register struct and unions
  pointer-field-lookup = register-field-lookup(|"rewrite-pointer-struct-name", NablNsStruct(), NablNsField())
  task-rewrite: ("rewrite-pointer-struct-name", Pointer(Struct(Identifier(s)))) -> s

  pointer-field-lookup = register-field-lookup(|"rewrite-pointer-union-name", NablNsUnion(), NablNsField())
  task-rewrite: ("rewrite-pointer-union-name", Pointer(Union(Identifier(s)))) -> s
