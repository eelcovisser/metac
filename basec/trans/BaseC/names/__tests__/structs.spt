module structs

language MetaC

test resolve struct type [[
  struct [[X]] {};
  struct [[X]] y;
]] resolve #2 to #1

test resolve union type [[
  union [[X]] {};
  union [[X]] y;
]] resolve #2 to #1

test resolve struct field [[
  struct X {int32 [[x]];};
  struct X a;
  int32 c = a.[[x]];
]] resolve #2 to #1

test resolve struct field via pointer [[
  struct X {int32 [[x]];};
  struct X *a;
  int32 c = a->[[x]];
]] resolve #2 to #1

test resolve union field [[
  union X {int32 [[x]];};
  union X y;
  int32 z = y.[[x]];
]] resolve #2 to #1

test resolve union field via pointer [[
  union X {int32 [[x]];};
  union X *a;
  int32 c = a->[[x]];
]] resolve #2 to #1

test typedef'd struct [[
  typedef struct {int32 [[a]]; } A;
  A x;
  int32 y = x.[[a]];
]] resolve #2 to #1

test typedef'd pointer struct [[
  typedef struct {int32 [[a]]; } * A;
  A x;
  int32 y = x->[[a]];
]] resolve #2 to #1

test typedef'd pointer struct alternative [[
  typedef struct {int32 [[a]]; } _A;
  typedef _A * A;
  A x;
  int32 y = x->[[a]];
]] resolve #2 to #1

test typedef'd union [[
  typedef struct {int32 [[a]]; } A;
  A x;
  int32 y = x.[[a]];
]] resolve #2 to #1

test struct in declaration [[
  void f() {
    struct { int [[a]]; } b;
    b.[[a]];
  }
]] resolve #2 to #1

test struct in pointer declaration [[
  void f() {
    struct { int [[a]]; } *b;
    b->[[a]];
  }
]] resolve #2 to #1

test union in pointer declaration [[
  void f() {
    union { int [[a]]; } *b;
    b->[[a]];
  }
]] resolve #2 to #1
