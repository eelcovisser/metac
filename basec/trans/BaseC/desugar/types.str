module BaseC/desugar/types

imports

  signatures/BaseC/-
  BaseC/desugar/constructors
  BaseC/utils/numbers

rules

  is-storage-class-specifier =
    ?Auto() <+ ?Register() <+ ?Static() <+ ?Extern() <+ ?Typedef()

  is-type-specifier =
    not(is-storage-class-specifier)

  is-type-qualifier =
    ?Const() <+ ?Volatile()

  desugar-to-unsigned: Char()  -> UInt8()
  desugar-to-unsigned: Int8()  -> UInt8()
  desugar-to-unsigned: Int16() -> UInt16()
  desugar-to-unsigned: Int32() -> UInt32()
  desugar-to-unsigned: Int64() -> UInt64()

  // when it is explicitly `signed`
  desugar-to-signed: Char() -> Int8()

  desugar-unsigned =
    ?specifiers
    ; try(fetch(?Unsigned()) ; <map(try(desugar-to-unsigned))> specifiers)
    ; try(fetch(?Signed())   ; <map(try(desugar-to-signed))> specifiers)
    ; filter(not(?Unsigned() <+ ?Signed()))

  // char is not the same as signed char
  // https://github.com/arian/metac/issues/24
  // desugar-to-sized-ints: Char()  -> Int8()

  desugar-to-sized-ints: Short() -> Int16()
  desugar-to-sized-ints: Int()   -> Int32()
  desugar-to-sized-ints: Long()  -> Int64()

  desugar-to-sized-floats: Float() -> Float32()
  desugar-to-sized-floats: Double() -> Float64()

  desugar-legacy-types =
    map(try(desugar-to-sized-ints) ; try(desugar-to-sized-floats))
    ; try(desugar-unsigned)

  desugar-decl-types =
    filter(is-type-specifier)
    ; desugar-legacy-types
    ; ?specifiers
    ; <filter(is-type-qualifier)> specifiers ; ?qualifiers
    ; <filter(not(is-type-qualifier))> specifiers ; ?[type | _]
    ; !Type(qualifiers, type)

  find-decl =
    oncetd(?Decl(_) ; ?d) ; !d

  desugar-array-size: Some(value) -> Some(<try(number-to-int)> value)
  desugar-array-size: None() -> None()

  merge-types:
    (base-type@Type(mods, type), Some(Pointer(qualifiers, ptr)), decl) -> t
    where
      mods* := <conc> (mods, qualifiers)
      ; t := <merge-types> (Type(mods*, Pointer(type)), ptr, decl)

  merge-types:
    (Type(mods, type), ptr, ArrayDecl(d, size)) -> t
    where
      t := <merge-types> (Type(mods, Array(type, <desugar-array-size> size)), ptr, d)

  merge-types:
    (Type(mods, type), ptr, FuncDecl(d, params)) -> t
    where
      ps := <map(?FunDefinitionParameter(<id>, _) <+ ?FunDefinitionParameter(<id>))> params
      ; t := <merge-types> (Type(mods, Function(type, ps)), ptr, d)

  merge-types:
    (Type(mods, type), ptr, FuncDeclIDs(d, params)) -> <debug> t
    where
      ps := <map(\ p -> Type([], Int32()) \)> params
      ; t := <merge-types> (Type(mods, Function(type, ps)), ptr, d)

  merge-types:
    (base-type, None(), _) -> base-type
