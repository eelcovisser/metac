module BaseC/desugar/declarations

imports

  signatures/BaseC/-
  BaseC/desugar/constructors
  BaseC/desugar/types
  BaseC/desugar/functions

// variable declarations
rules

  desugar-var-declarator(|storage, base-type):
    decl@Declarator(ptr, d) -> VarDeclaration(
      storage,
      <merge-types> (base-type, ptr, d),
      <find-decl> decl,
      None()
    )

  desugar-var-declarator(|storage, base-type):
    InitDeclarator(decl@Declarator(ptr, d), init) -> VarDeclaration(
      storage,
      <merge-types> (base-type, ptr, d),
      <find-decl> decl,
      Some(init)
    )

  is-type-declarator = ?Typedef()
  is-type-declarator = ?Enum(_, _)
  is-type-declarator = ?Struct(_, _)
  is-type-declarator = ?Union(_, _)

  desugar:
    Declaration(
      specifiers,
      declarators
    ) -> decls
    where
      <all(not(is-type-declarator))> specifiers // no typedef to VarDeclaration
      ; type := <desugar-decl-types> specifiers
      ; storage := <filter(is-storage-class-specifier)> specifiers
      ; decls := <map(desugar-var-declarator(|storage, type))> declarators

// typedefs
rules

  desugar-typedef-declarator(|base-type):
    decl@Declarator(ptr, d) -> TypedefDeclaration(
      <merge-types> (base-type, ptr, d),
      <find-decl> decl
    )

  desugar:
    Declaration(
      specifiers,
      declarators
    ) -> decls
    where
      <some(?Typedef())> specifiers
      ; type := <desugar-decl-types> specifiers
      ; decls := <map(desugar-typedef-declarator(|type))> declarators

// structs and unions
rules

  // struct in specifiers (either of a variable or typedef)
  desugar01:
    Declaration(specifiers, declarators)
    -> [Declaration([struct], []), Declaration(specifiers', declarators)]
    where
      struct@Struct(Some(name), _) := <fetch-elem(?Struct(_, _)) ; try(desugar-anon-struct)> specifiers
      ; specifiers' := <map(try(?Struct(_, _) ; !Struct(name)))> specifiers

  desugar-anon-struct: Struct(None(), fields) -> Struct(Some(Identifier(<newname> "anon_struct_")), fields)

  // unions in specifiers
  desugar01:
    Declaration(specifiers, declarators)
    -> [Declaration([union], []), Declaration(specifiers', declarators)]
    where
      union@Union(Some(name), _) := <fetch-elem(?Union(_, _)) ; try(desugar-anon-union)> specifiers
      ; specifiers' := <map(try(?Union(_, _) ; !Union(name)))> specifiers

  desugar-anon-union: Union(None(), fields) -> Union(Some(Identifier(<newname> "anon_union_")), fields)

  desugar-struct-declarator(|base-type):
    decl@Declarator(ptr, d) -> StructDeclarator(
      <merge-types> (base-type, ptr, d),
      <find-decl> decl,
      None()
    )

  desugar-struct-declarator(|base-type):
    StructSizedFieldDeclarator(Some(decl@Declarator(ptr, d)), size) -> StructDeclarator(
      <merge-types> (base-type, ptr, d),
      <find-decl> decl,
      Some(size)
    )

  desugar:
    StructDeclaration(
      specifiers,
      declarators
    ) -> decls
    where
      type := <desugar-decl-types> specifiers
      ; decls := <map(desugar-struct-declarator(|type))> declarators

// enums
rules

  desugar:
    Enum(Some(name@Identifier(_)), enums) ->
    <desugar-enums> (name, enums)

  desugar:
    Enum(None(), enums) ->
    <desugar-enums> (Identifier(<newname>), enums)

  desugar-enums: (name, enums) ->
    Enum(name, <map(\ Enumerator(e, i) -> Enumerator(e, i, <strip-annos> name) \)> enums)
