module declarations

language MetaC

test variable declarations [[
  int32 a,b,c;
]] build generate-c to "signed int a; signed int b; signed int c;"

test char variable should not get signed/unsigned as it's different [[
  char a;
]] build generate-c to "char a;"

test char variable should keep signed specifier [[
  signed char a;
  int8 b;
]] build generate-c to "signed char a; signed char b;"

test char variable should keep unsigned specifier [[
  unsigned char a;
  uint8 b;
]] build generate-c to "unsigned char a; unsigned char b;"

test array variable without an array size [[
  int32 a[];
]] build generate-c to "signed int a[];"

test array variable with an array size [[
  int32 a[10];
]] build generate-c to "signed int a[10];"

test array variable with an octal array size [[
  int32 a[010];
]] build generate-c to "signed int a[8];"

test array variable with an hex array size [[
  int32 a[0x10];
]] build generate-c to "signed int a[16];"

test block initializers [[
  static int32 a[] = {1,2,3};
]] build generate-c to "static signed int a[] = {1, 2, 3};"

test typedef declaration [[
  typedef uint32 a;
]] build generate-c to "typedef unsigned int a;"

test typedef declaration [[
  typedef uint32 a;
  typedef a *b;
]] build generate-c to "
  typedef unsigned int a;
  typedef a *b;
"

test typedef declaration of a struct [[
  typedef struct { int32 x; } a;
]] build generate-c to "typedef struct { signed int x; } a;"

test typedef declaration of a struct with a size [[
  typedef struct { int32 x; int32 y : 4; } a;
]] build generate-c to "typedef struct  {
    signed int x;
    signed int y : 4;
  } a;"

test paren decl [[
  void a(b, c);
]] build generate-c to "void a(signed int p1, signed int p2);"

test abstract function declarations [[
  void a(int32,int32 *,const int32);
]] build generate-c to "void a(signed int p1, signed int * p2, const signed int p3);"

test function declarations [[
  void a(int32 b,int32 * c,const int32 d);
]] build generate-c to "void a(signed int p1, signed int * p2, const signed int p3);"

test function declarations with fn pointer [[
  void a(int32 b,int32 * c(int),const int32 d);
]] build generate-c to "void a(signed int p1, signed int * p2(signed int p1), const signed int p3);"
