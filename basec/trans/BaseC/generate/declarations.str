module BaseC/generate/declarations

imports

  signatures/BaseC/-
  BaseC/desugar/constructors
  BaseC/generate/types

strategies

  // generate Declarator from Decl and Type(mods, type)
  generate-Declarator:
    (decl, Type(mods, t)) ->
    Declarator(
      <generate-Declarator-pointer-type> t,
      <generate-Declarator-decl> (t, decl)
    )

  generate-Declarator-pointer-type:
    Array(t, _) -> <generate-Declarator-pointer-type> t

  generate-Declarator-pointer-type:
    Function(t, _) -> <generate-Declarator-pointer-type> t

  generate-Declarator-pointer-type:
    Pointer(t) -> Some(Pointer([], <generate-Declarator-pointer-type> t))

  generate-Declarator-pointer-type:
    t -> None()

  generate-Declarator-decl:
    (Array(t, s), decl) -> ArrayDecl(<generate-Declarator-decl> (t, decl), <try(generate-array-size)> s)

  generate-Declarator-decl:
    (Function(t, ps), decl) -> FuncDecl(
      <generate-Declarator-decl> (t, decl),
      ParameterList(<map-with-index(\ (i, pt) -> Parameter(
        <gen-Type> pt,
        <generate-Declarator> (Decl(Identifier(<conc-strings> ("p", <int-to-string> i))), pt)
      ) \)> ps)
    )

  generate-Declarator-decl:
    (Pointer(t), decl) -> <generate-Declarator-decl> (t, decl)

  generate-Declarator-decl:
    (t, decl) -> decl

  generate-Initializer:
    (decl, Some(init)) -> InitDeclarator(decl, init)

  generate-Initializer:
    (decl, None()) -> decl

  generate-array-size: None() -> None()
  generate-array-size: Some(value) -> Some(Integer(<int-to-string> value))

  generate:
    VarDeclaration(storage, type, name, init)
    -> Declaration(
      specifiers,
      [declarator]
    )
    where
      specifiers := <conc> (storage, <gen-Type> type)
      ; declarator := <generate-Initializer> (<generate-Declarator> (name, type), init)

  // typedefs
  generate:
    TypedefDeclaration(type, name)
    -> Declaration(specifiers, [decl])
    where
      specifiers := <conc> ([Typedef()], <gen-Type> type)
      ; decl := <generate-Declarator> (name, type)

  // structs

  generate:
    StructDeclarator(type, name, None())
    -> StructDeclaration(specifiers, [decl])
    where
      specifiers := <gen-Type> type
      ; decl := <generate-Declarator> (name, type)

  generate:
    StructDeclarator(type, name, Some(size))
    -> StructDeclaration(specifiers, [StructSizedFieldDeclarator(Some(decl), size)])
    where
      specifiers := <gen-Type> type
      ; decl := <generate-Declarator> (name, type)

  // enums

  generate:
    Enum(name@Identifier(_), enums)
    -> Enum(Some(name), <map(\ Enumerator(e, i, t) -> Enumerator(e, i) \)> enums)
