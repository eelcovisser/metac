module BaseC/Expr

imports

  BaseC/Common
  BaseC/Constants
  BaseC/Declarations
  BaseC/Identifiers

context-free syntax

  // expression
  Expr =
    <(<Expr>)> {bracket}

  Expr.Comma =
    <<AExpr>, <{AExpr ", "}+>>

  Expr =
    AExpr {prefer}


  AExpr = <(<AExpr>)> {bracket}


  // assignment-expression
  AExpr.Assign =
    <<UnaryExpr> <AssignOp> <AExpr>>

  // assignment-operator
  AssignOp.Assign =
    <=>
  AssignOp.PlusAssign =
    <+=>
  AssignOp.MinusAssign =
    <-=>
  AssignOp.MultiplyAssign =
    <*=>
  AssignOp.DivisionAssign =
    </=>
  AssignOp.ModuloAssign =
    <%=>
  AssignOp.BitwiseAndAssign =
    <&=>
  AssignOp.BitwiseXorAssign =
    <^=>
  AssignOp.BitwiseOrAssign =
    <|=>
  AssignOp.BitshiftLeftAssign =
    [<<=]
  AssignOp.BitshiftRightAssign =
    [>>=]


  // conditional-expression
  AExpr.Conditional =
    <<AExpr> ? <Expr> : <AExpr>> {right}


  // logical-OR-expression
  AExpr.LogicalOr =
    <<AExpr> || <AExpr>> {left}


  // logical-AND-expression
  AExpr.LogicalAnd =
    <<AExpr> && <AExpr>> {left}

  // inclusive-OR-expression
  AExpr.InclusiveOr =
    <<AExpr> | <AExpr>> {left}

  // exclusive-OR-expression
  AExpr.ExclusiveOr =
    <<AExpr> ^ <AExpr>> {left}

  // AND-expression
  AExpr.InclusiveAnd =
    <<AExpr> & <AExpr>> {left}

  // equality-expression
  AExpr.Equal =
    <<AExpr> == <AExpr>> {left}

  AExpr.InEqual =
    <<AExpr> != <AExpr>> {left}

  // relational-expression
  AExpr.Lt =
    [[AExpr] < [AExpr]] {left}

  AExpr.Gt =
    [[AExpr] > [AExpr]] {left}

  AExpr.Lte =
    [[AExpr] <= [AExpr]] {left}

  AExpr.Gte =
    [[AExpr] >= [AExpr]] {left}

  // shift-expression
  AExpr.ShiftLeft =
    [[AExpr] << [AExpr]] {left}

  AExpr.ShiftRight =
    [[AExpr] >> [AExpr]] {left}

  // additive-expression
  AExpr.Add =
    <<AExpr> + <AExpr>> {left}

  AExpr.Subtract =
    <<AExpr> - <AExpr>> {left}


  // multiplicative-expression
  AExpr.Mult =
    <<AExpr> * <AExpr>> {left}

  AExpr.Div =
    <<AExpr> / <AExpr>> {left}

  AExpr.Mod =
    <<AExpr> % <AExpr>> {left}


  // cast-expression
  AExpr =
    CastExpr

  CastExpr =
    UnaryExpr

  CastExpr.Cast =
    <(<TypeName>) <CastExpr>>


  // unary-expression
  UnaryExpr.IncrementPrefix =
    <++<UnaryExpr>> {right}

  UnaryExpr.DecrementPrefix =
    <--<UnaryExpr>> {right}

  UnaryExpr.Address =
    <&<CastExpr>> {right}

  UnaryExpr.Deref =
    <*<CastExpr>> {right}

  UnaryExpr.Positive =
    <+<CastExpr>> {right}

  UnaryExpr.Negative =
    <-<CastExpr>> {right}

  UnaryExpr.Complement =
    <~<CastExpr>> {right}

  UnaryExpr.Negate =
    <!<CastExpr>> {right}

  UnaryExpr.SizeofExpr =
    <sizeof <UnaryExpr>> {right}

  UnaryExpr.Sizeof =
    <sizeof (<TypeName>)> {right}

  UnaryExpr =
    PostFixExpr


  // postfix-expression

  PostFixExpr.ArrayField =
    <<PostFixExpr>[<Expr>]>

  FunctionCallExpr.Call =
    <<PostFixExpr>(<{AExpr ", "}*>)>

  PostFixExpr = FunctionCallExpr

  PostFixExpr.Field =
    <<PostFixExpr>.<Identifier>>

  PostFixExpr.PointerField =
    [[PostFixExpr]->[Identifier]]

  PostFixExpr.Increment =
    <<PostFixExpr>++> {left}

  PostFixExpr.Decrement =
    <<PostFixExpr>--> {left}

  PostFixExpr =
    PrimaryExpr


  // primary-expression
  VarExpr.Var =
    Identifier

  PrimaryExpr =
    VarExpr

  PrimaryExpr =
    Constant {prefer}

  PrimaryExpr.Paren =
    <(<Expr>)> {avoid}


context-free priorities
  { left:
      CastExpr.Cast
      PostFixExpr.Increment
      PostFixExpr.Decrement
      PostFixExpr.ArrayField
      FunctionCallExpr.Call
      PostFixExpr.Field
      PostFixExpr.PointerField
  } >
  { right:
      UnaryExpr.IncrementPrefix
      UnaryExpr.DecrementPrefix
      UnaryExpr.Address
      UnaryExpr.Deref
      UnaryExpr.Positive
      UnaryExpr.Negative
      UnaryExpr.Complement
      UnaryExpr.Negate
  } >
  { left:
      AExpr.Mult
      AExpr.Div
      AExpr.Mod
  } >
  { left:
      AExpr.Add
      AExpr.Subtract
  } >
  { left:
      AExpr.ShiftLeft
      AExpr.ShiftRight
  } >
  { left:
      AExpr.Gt
      AExpr.Gte
      AExpr.Lt
      AExpr.Lte
  } >
  {
    left:
      AExpr.Equal
      AExpr.InEqual
  } >
  { left: AExpr.InclusiveAnd } >
  { left: AExpr.ExclusiveOr } >
  { left: AExpr.InclusiveOr } >
  { left: AExpr.LogicalAnd } >
  { left: AExpr.LogicalOr } >
  { right: AExpr.Conditional } >
  { right: AExpr.Assign } >
  { left: Expr.Comma }

lexical restrictions
  "+" -/- [\+]
  "-" -/- [\-]
  "&" -/- [\&]
