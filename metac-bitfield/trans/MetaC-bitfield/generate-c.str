module MetaC-bitfield/generate-c

imports

  signatures/BaseC/-
  runtime/types/-
  BaseC/desugar/constructors
  MetaC-bitfield/trans
  names/MetaC-bitfield/names
  MetaC-bitfield/desugar
  MetaC-bitfield/utils
  metac-runtime-utils/bitmask

rules

  // the bitfields declaration is only compiler information, won't be in the
  // C output
  generate01: Bitfields(name, _, size)
    -> TypedefDeclaration(
        Type([], type),
        Decl(name)
      )
    where
      type := <bitfields-int-size ; gen-smallest-int-type> size

  gen-smallest-int-type: 8  -> UInt8()
  gen-smallest-int-type: 16 -> UInt16()
  gen-smallest-int-type: 32 -> UInt32()
  gen-smallest-int-type: 64 -> UInt64()

  // translate instantiations of the bitfields variables
  generate01:
    VarDeclaration(storage, t'@Type(mods, t), declarator, Some(init))
    -> VarDeclaration(storage, t', declarator, Some(Cast(Type([], t), init)))
    where <gen-has-bitfields-type> t

  generate01:
    VarDeclaration(storage, t'@Type(mods, t), declarator, None())
    -> VarDeclaration(storage, t', declarator, Some(Integer("0")))
    where <gen-has-bitfields-type> t

  gen-get-bitfields-type-internal: t@TypedefName(_) -> <get-type ; gen-get-bitfields-type> t
  gen-get-bitfields-type-internal: b@Bitfields(_, _) -> b
  gen-get-bitfields-type = topdown(try(gen-get-bitfields-type-internal))
  gen-has-bitfields-type = gen-get-bitfields-type ; oncetd(?Bitfields(_, _))

  // desugar pointer fields for generation
  generate01:
    PointerField(lvalue, field) -> Field(Paren(Deref(lvalue)){(Type(), bitfield-type)}, field)
    where
      type := <get-type ; ?Pointer(bitfield-type@Bitfields(_, _))> lvalue

  // assignments using bitfields
  generate02:
    Assign(
      Field(lvalue, Identifier(field)),
      Assign(),
      value
    ) ->
    Assign(
      lvalue,
      Assign(),
      InclusiveOr(
        Paren(
          InclusiveAnd(
            InclusiveAnd(
              lvalue,
              Complement(Paren(ShiftLeft(field-mask, Integer(<int-to-string> shift))))
            ),
            full-mask
          )
        ),
        Paren(
          ShiftLeft(
            Paren(
              InclusiveAnd(value, field-mask)
            ),
            Integer(<int-to-string> shift)
          )
        )
      )
    )
    where
      type := <get-type ; ?Bitfields(_, size)> lvalue
      ; BitfieldRange(shift, _) := <get-bitfield-range> field
      ; field-mask := Hexadecimal(<get-bitfield-size ; bitmask> field)
      ; full-mask := Hexadecimal(<!size ; bitfields-int-size ; bitmask> lvalue)

  // field lookups
  generate:
    Field(lvalue, Identifier(field)) -> Paren(InclusiveAnd(
      ShiftRight(lvalue, Integer(<int-to-string> shift)),
      field-mask
    ))
    where
      type := <get-type ; ?Bitfields(_, size)> lvalue
      ; BitfieldRange(shift, _) := <get-bitfield-range> field
      ; field-mask := Hexadecimal(<get-bitfield-size ; bitmask> field)
