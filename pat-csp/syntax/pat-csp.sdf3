module pat-csp

imports

  pat-csp/Common

context-free start-symbols

  Start

context-free syntax

  Start.PAT_SpecBody = [[{SpecBody "\n"}*]]

  SpecBody = Definition
  SpecBody = LetDefinition
  SpecBody = Channel
  SpecBody = Define
  SpecBody = Assert

  Define.PAT_Define = [#define [ID] [INT];]

  Definition.PAT_Definition = [[ID]([{Parameter ", "}*]) = [InterleaveExpr];]

  Parameter.PAT_Parameter = ID

  InterleaveExpr.PAT_InterleaveExpr = [[{ChannelExpr " ||| "}+]]
  InterleaveExpr = GeneralChoiceExpr

  GeneralChoiceExpr.PAT_GeneralChoiceExpr = {InternalChoiceExpr "\n [] "}+
  GeneralChoiceExpr = InternalChoiceExpr {prefer}

  InternalChoiceExpr.PAT_InternalChoiceExpr = {SequentialExpr " <> "}+
  InternalChoiceExpr = SequentialExpr {prefer}

  SequentialExpr.PAT_SequentialExpr = {GuardExpr " ; "}+
  SequentialExpr = GuardExpr

  GuardExpr.PAT_GuardExpr = <[<Expression>] <ChannelExpr>>
  GuardExpr = ChannelExpr

  ChannelExpr.PAT_ChannelExprWrite = [[ID] ! [Expression] -> [ChannelExpr]]
  ChannelExpr.PAT_ChannelExprRead = [[ID] ? [Expression] -> [ChannelExpr]]
  ChannelExpr = EventExpr

  EventExpr = CaseExpr

  CaseExpr = IfExpr
  CaseExpr.PAT_CaseExpr =
    [case {
      [CaseExprCond+]
      [CaseExprDefault?]
    }]

  CaseExprCond.PAT_CaseExprCond = [[Expression]: [InterleaveExpr]]
  CaseExprDefault.PAT_CaseExprDefault = [default: [InterleaveExpr]]

  IfExpr = AtomicExpr
  IfExpr.PAT_IfExpr =
    [if ([Expression]) {
      [InterleaveExpr]
    }]

  IfExpr.PAT_IfElseExpr =
    [if ([Expression]) {
      [InterleaveExpr]
    } else {
      [InterleaveExpr]
    }]

  AtomicExpr.PAT_Process = [[ID]([{Expression ", "}*])]
  AtomicExpr.PAT_Skip = "Skip"
  AtomicExpr.PAT_Stop = "Stop"
  AtomicExpr.PAT_Parens = [([InterleaveExpr])]

  Expression.PAT_Identifier = ID
  Expression.PAT_Integer = INT
  Expression.PAT_True = "true"
  Expression.PAT_False = "false"
  Expression.PAT_Or = [[Expression] || [Expression]] {left}
  Expression.PAT_And = [[Expression] && [Expression]] {left}
  Expression.PAT_NotEquals = [[Expression] == [Expression]] {left}
  Expression.PAT_Equals = [[Expression] == [Expression]] {left}
  Expression.PAT_Gte = [[Expression] >= [Expression]] {left}
  Expression.PAT_Gt = [[Expression] > [Expression]] {left}
  Expression.PAT_Lte = [[Expression] <= [Expression]] {left}
  Expression.PAT_Lt = [[Expression] < [Expression]] {left}
  Expression.PAT_Plus = [[Expression] + [Expression]] {left}
  Expression.PAT_Subtract = [[Expression] - [Expression]] {left}
  Expression.PAT_Multiply = [[Expression] * [Expression]] {left}
  Expression.PAT_Modulo = [[Expression] % [Expression]] {left}
  Expression.PAT_Divide = [[Expression] / [Expression]] {left}
  Expression = [([Expression])] {bracket}

  LetDefinition.PAT_VarDef = [var [ID];]

  Channel.PAT_Channel = [channel [ID] 0;]

  Assert.PAT_Assert = [#assert [DefinitionRef] [Assertion];]

  Assertion.PAT_AssertDeadlockFree = "deadlockfree"

  DefinitionRef.PAT_DefinitionRef = [[ID]([{ArgumentExpression ","}*])]

  // argumentExpression
  //  : conditionalOrExpression
  //  | recordExpression
  //  ;
  ArgumentExpression.PAT_ArgumentExpression = Expression

context-free priorities

  {left:
    Expression.PAT_Multiply
    Expression.PAT_Modulo
    Expression.PAT_Divide
  } > {left:
    Expression.PAT_Subtract
    Expression.PAT_Plus
  } > {left:
    Expression.PAT_Lt
    Expression.PAT_Lte
    Expression.PAT_Gt
    Expression.PAT_Gte
  } > {left:
    Expression.PAT_Equals
    Expression.PAT_NotEquals
  } > {left:
    Expression.PAT_And
  } > {left:
    Expression.PAT_Or
  }
