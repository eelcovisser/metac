module metac

imports

  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  editor/Outliner
  editor-common.generated
  runtime/index/-
  runtime/nabl/-
  runtime/properties/-
  runtime/types/-
  runtime/task/-
  runtime/analysis/-
  runtime/editor/-
  names/names
  generate-c
  generate-dot
  generate-csp
  pp
  test-utils
  desugar/-
  metac-runtime-utils/path-join
  signatures/BaseC/Program-sig

  BaseC/trans
  BaseC/analysis/disamb
  MetaC-bitfield/trans
  MetaC-SM/trans
  MetaC-Err/trans
  MetaC-CSP/trans

rules // Analysis

  is-source-ast-test =
    ? file
    ; <is-substring(!"syntax/")> file
    ; <is-substring(!"__tests__")> file
    ; <is-substring(!".spt")> file

  pre-analysis:
    File(file, Program(_, decls), num)
    ->
    File(
      file,
      Program(
        <path-join(|<project-path>)> <vfs-to-path> file,
        <disamb> decls
      ),
      num
    )

  has-test-file =
    fetch(?File(<id>, _, _) ; is-source-ast-test)

  metac-test-collect(s|lang, source, h, l) = id

  editor-analyze = map(pre-analysis) ; ?input ;
    // if it has syntax tests, don't do the nabl analysis and stuff, but just return
    // the original parsed AST
    if <has-test-file> input then
      analyze-all(id, metac-test-collect, id, id|<language>)
    else
       analyze-all(desugar-all, id, id|<language>)
    end

rules // Editor services

  // Resolves a reference when the user control-clicks or presses F3 in the editor.
  editor-resolve:
    (node, position, ast, path, project-path) -> definition
    where
      definition := <analysis-resolve(|<language>, project-path)> node

  // Returns "hover help" information for a particular node in the editor.
  // For references, this rule is invoked using the resolved term.
  editor-hover:
    (target, position, ast, path, project-path) ->
      <get-editor-properties(pp-partial-MetaC-string |<language>, project-path);properties-to-html>target

  // Gathers the outline nodes for the outline view.
  editor-outline:
    (node, position, ast, path, project-path) -> outline
    where
      outline := <simple-label-outline(to-outline-label)> ast

  // Gathers the properties for the properties view.
  editor-properties:
    (target, position, ast, path, project-path) ->
      <get-all-editor-properties(pp-partial-MetaC-string |<language>, project-path)>target

  // Completes an identifier when the user presses control-space
  // (the completion identifier in the AST provides additional context information)
  editor-complete:
    (node, position, ast, path, project-path) -> proposals
    where
      proposals := <analysis-propose-completions(|<language>, project-path)> ast

  // Formats the program using a pretty printer.
  editor-format:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      ext      := <get-extension> path;
      filename := <guarantee-extension(|$[pp.[ext]])> path;
      result   := <pp-debug> selected

rules // Debugging

  // Prints the abstract syntax ATerm of a selection.
  debug-show-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := <disamb> selected

  // Prints the analyzed annotated abstract syntax ATerm of a selection.
  debug-show-analyzed:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"analyzed.aterm")> path;
      result   := ast

  debug-index-project =
    analysis-debug-index-project(|<language>)

  debug-index-project-resolve =
    analysis-debug-index-project-resolve(|<language>)

  debug-index-partition =
    analysis-debug-index-partition(|<language>)

  debug-task-project =
    analysis-debug-task-project(|<language>)

  debug-task-partition =
    analysis-debug-task-partition(|<language>)

  debug-task-selection =
    analysis-debug-task-selection(|<language>)

  debug-index-partition-resolve =
    analysis-debug-index-partition-resolve(|<language>)

  debug-project =
    analysis-debug-project(|<language>)

  debug-partition =
    analysis-debug-partition(|<language>)

  debug-reanalyze =
    analysis-debug-reanalyze(|<language>)

strategies

    external vfs-to-path(|)
