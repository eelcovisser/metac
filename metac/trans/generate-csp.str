module generate-csp

imports

  metac-runtime-utils/string
  pat-csp/pp
  signatures/pat-csp-sig

strategies

  generate-csp = fail

  generate-csp-register = fail
  generate-csp-register-type(|type): types -> [type | types]
    where <not(fetch-elem(?type))> types

  generate-csp-collect-types = <rec x(try(generate-csp-register ; x))> []

  generate-csp-test = generate-csp-transform-t(id)

  generate-csp-transform = generate-csp-transform-t(pp-pat-csp-string)

  generate-csp-transform-t(s): t@(selected, position, ast, path, project-path) -> (file-name, csp)
    where
      file-name := <guarantee-extension(|"csp")> path
      ; csp :=
        <
          generate-csp-collect-types
          ; map(\ type -> <generate-csp> (type, selected) \)
          ; flatten-list
          ; !PAT_SpecBody(<id>)
          ; s
        > selected
